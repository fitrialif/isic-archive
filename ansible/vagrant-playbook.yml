---
- name: vagrant setup
  hosts: all

  vars:
      ansible_python_interpreter: "/usr/bin/python2.7"
      isic_archive_clone: false
      sentry_dsn: ""
      sentry_environment: "development"
      celery_broker_url: "redis://localhost"
      celery_result_backend: "redis://localhost"

  # TODO: setup SSH reverse lookup
  # TODO: set hostname
  roles:
    - role: mailhog

    - role: isic
      isic_archive_path: "{{ ansible_user_dir }}/isic_archive"
      isic_email_host: "http://isic-archive.test"
      isic_smtp_host: "localhost"
      isic_smtp_port: "1025"
      # S3 development is mocked with localstack
      isic_upload_bucket_name: "test-upload-bucket"
      isic_upload_role_arn: "fake-arn"

    - role: nginx
      site_hostname: isic-archive.test
      upstream_proxy: true

    - role: localstack
      isic_upload_bucket_name: "test-upload-bucket"
      isic_upload_role_arn: "fake-arn"
      localstack_data_dir: "{{ ansible_user_dir }}/localstack-data"

    - role: celery
      archive_api_url: "http://isic-archive.test/api/v1"
      celery_bin: "{{ python_dist_path }}/bin/celery"
      celery_concurrency: 1
      celery_user: vagrant

  post_tasks:
    - name: Install redis
      apt:
        name: redis
      become: true

    # The celery user needs to be able to write to the assetstore via tasks
    - name: Add celery user to vagrant group
      user:
        name: celery
        groups: vagrant
        append: true
      become: true

    - name: Activate virtualenv on login
      lineinfile:
        line: 'source {{ python_dist_path }}/bin/activate'
        path: "{{ ansible_user_dir }}/.profile"
        state: present

    - name: Create / remove a local girder_node_modules directory
      file:
        path: "{{ ansible_user_dir }}/girder_node_modules"
        state: "{{ 'directory' if bind_node_modules else 'absent' }}"

    - name: Mount / unmount girder_node_modules
      mount:
        path: "{{ ansible_user_dir }}/girder/node_modules"
        src: "{{ ansible_user_dir }}/girder_node_modules"
        state: "{{ 'mounted' if bind_node_modules else 'absent' }}"
        fstype: none
        opts: bind
        boot: yes
      become: yes
      become_user: root

    - name: Define WATCH_USEPOLLING environment variable
      lineinfile:
        line: "export WATCH_USEPOLLING=true"
        path: "{{ ansible_user_dir }}/.bashrc"
        state: present
